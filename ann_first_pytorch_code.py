# -*- coding: utf-8 -*-
"""ANN_FIRST_Pytorch_CODE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11M7cyZtYiz7hc_OoCJlg-kJaNLBjtM2z
"""

from torch import nn , sigmoid, Tensor
import numpy as np

#implementing a neuron in a pytorch
#just for learning, would no be used in the future
class neuron(nn.Module):
   def __init__(self, num_inputs, num_outputs):
     super(neuron, self). __init__()
     self.activation_function = sigmoid
     self.linear_transform = nn.Linear(num_inputs, num_outputs, bias = True)
   def forward(self, x):
     linear_out = self.linear_transform(x)
     out = self.activation_function(linear_out)
     return out

my_neurons = neuron(4, 10)

my_neurons

#input
Tensor(np.random.rand(4))

#output
my_neurons.forward(Tensor(np.random.rand(4)))

import torch
from torch import softmax

#implementing feed forward
class feedforward(nn.Module):
  def __init__(self):
     super(feedforward, self).__init__()
     self.hidden_layer_1 = nn.Linear(4,8 , bias = True)
     self.hidden_layer_2 = nn.Linear(8, 20, bias= True)
     self.activation_1 = nn.Sigmoid()
     self.activation_2 = nn.Sigmoid()
     self.output_layer = nn.Linear(20, 3, bias =True)
    #because we want classification method , we use softmax
     self.activation_output = nn.Softmax(dim=0)
  def forward(self, x):
     h1_out =self.hidden_layer_1(x)
     h1_act = self.activation_1(h1_out)
     h2_out = self.hidden_layer_2(h1_act)
     h2_act = self.activation_2(h2_out)
     h_out = self.output_layer(h2_act)
     output = self.activation_output(h_out)
     return output

# Pick a manual seed for randomization
torch.manual_seed(41)
# Create an instance of model
model = feedforward()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

url = 'https://gist.githubusercontent.com/netj/8836201/raw/6f9306ad21398ea43cba4f7d537619d0e07d5ae3/iris.csv'
my_df = pd.read_csv(url)

my_df.tail()

# Change last column from strings to integers
my_df['variety'] = my_df['variety'].replace('Setosa', 0.0)
my_df['variety'] = my_df['variety'].replace('Versicolor', 1.0)
my_df['variety'] = my_df['variety'].replace('Virginica', 2.0)
my_df

# Train Test Split!  Set X, y
X = my_df.drop('variety', axis=1)
y = my_df['variety']

# Convert these to numpy arrays
X = X.values
y = y.values

from sklearn.model_selection import train_test_split

# Train Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=41)

X_train

# Convert X features to float tensors
X_train = torch.FloatTensor(X_train)
X_test = torch.FloatTensor(X_test)

X_train

# Convert y labels to tensors long
y_train = torch.LongTensor(y_train)
y_test = torch.LongTensor(y_test)

# Set the criterion of model to measure the error, how far off the predictions are from the data
criterion = nn.CrossEntropyLoss()
# Choose Adam Optimizer, lr = learning rate (if error doesn't go down after a bunch of iterations (epochs), lower our learning rate)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

# Train our model!
# Epochs? (one run thru all the training data in our network)
epochs = 100
losses = []
for i in range(epochs):
  # Go forward and get a prediction
  y_pred = model.forward(X_train) # Get predicted results

  # Measure the loss/error, gonna be high at first
  loss = criterion(y_pred, y_train) # predicted values vs the y_train

  # Keep Track of our losses
  losses.append(loss.detach().numpy())

  # print every 10 epoch
  if i % 10 == 0:
    print(f'Epoch: {i} and loss: {loss}')

  # Do some back propagation: take the error rate of forward propagation and feed it back
  # thru the network to fine tune the weights
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

# Graph it out!
plt.plot(range(epochs), losses)
plt.ylabel("loss/error")
plt.xlabel('Epoch')

# Evaluate Model on Test Data Set (validate model on test set)
with torch.no_grad():  # Basically turn off back propogation
  y_eval = model.forward(X_test) # X_test are features from our test set, y_eval will be predictions
  loss = criterion(y_eval, y_test) # Find the loss or error

loss

new_iris = torch.tensor([4.7, 3.2, 1.3, 0.2])

with torch.no_grad():
  print(model(new_iris))

# Save our NN Model
torch.save(model.state_dict(), 'my_really_awesome_iris_model.pt')

# Load the Saved Model
new_model = feedforward()
new_model.load_state_dict(torch.load('my_really_awesome_iris_model.pt'))

# Make sure it loaded correctly
new_model.eval()